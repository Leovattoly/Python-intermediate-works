#include <stdio.h>

//defining integerPower as a recrusive funtion
int integerPower (int b,int e)
{
    if (e ==0)
    {
        return 1;
    }
    else
    {
        return(b*(integerPower(b,e-1)));
    }
    while (e>0)
    {
        
    }
}
int main() {
    int c;
    //calling the functoin
    c = integerPower(3,4);
    printf("Result: %d",c);
    return 0;
}

**********************************************


// C program for decimal to binary 
// conversion using recursion 
#include <stdio.h> 
  
// Decimal to binary conversion 
// using recursion 
int find(int decimal_number) 
{ 
    if (decimal_number == 0)  
        return 0;  
    else
        return (decimal_number % 2 + 10 *  
                find(decimal_number / 2)); 
} 
  
// main funtion  
int main() 
{ 
    int decimal_number = 121; 
    printf("%d", find(decimal_number)); 
    return 0; 
} 

****************************************

#include <stdio.h> 
  
  
int addition(int a,int b[], int res[])
{
    int i =0;
     for (i =0;i< sizeof(b);++i)
    {
        res[i] =  b[i] +a;
    }
}

int substraction(int a[],int b[], int res[])
{
    int i =0;
     for (i =0;i< sizeof(b);++i)
    {
        res[i] =  b[i] - a[i];
    }
}

int product(int a,int b[], int res[])
{
    int i =0;
     for (i =0;i< sizeof(b);++i)
    {
        res[i] = a * b[i];
    }
}

int dotProduct(int vect_A[], int vect_B[]) 
{ 
  
    int product = 0; 
  
    // Loop for calculate cot product 
    for (int i = 0; i < n; i++) 
  
        product = product + vect_A[i] * vect_B[i]; 
    return product; 
} 

void crossProduct(int vect_A[], int vect_B[], int cross_P[]) 
  
{ 
  
    cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]; 
    cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]; 
    cross_P[2] = vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]; 
} 
// Driver code  
int main() 
{ 
    int A = 3;
    int B [] = { 23,48,75,23,10,23,35,60};
    int C [] = { 23,48,75,23,10,23,35,60}  ;
    int D[3][4] = {{12,32,28,14}, {34,45,78,63}, {56,35,65,10}}; 
    int E[3][4] = {{11,23,45,76}, {21,32,31,75}, {43,57,18,23}}; 
    int F[2][2] = {{13,34,61},{32,54,21}};
    int i =0;
    int j =0;
    int res [8]={};
    product(A,B,res)
   
    printf("\nProduct of A * B\n");
    for (i =0;<sizeof(res);++i)
    {
        printf("%d \t",res[i]);
    }
    addition(A*-1,B,res);
     printf("\Addition of B-A \n");
    for (i =0;<sizeof(res);++i)
    {
        printf("%d \t",res[i]);
    }
    substraction(B,C,res);
     printf("\Substraction of B-C \n");
    for (i =0;<sizeof(res);++i)
    {
        printf("%d \t",res[i]);
    }
    printf("\nB.A (dot product): %d",dotProduct(B,A));
    
     product(A,D,res)
   
    printf("\nProduct of A * B\n");
    for (i =0;<3;++i)
    {
        for(j =0;j<4;++j)
        {
                    printf("%d \t",res[i][j]);

        }
        printf("\n");
        
    }
    
    
    return 0; 
} 
